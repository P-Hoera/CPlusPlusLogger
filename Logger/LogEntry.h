#pragma once

#include "LoggerAPI.h"

#include "RawLogEntry.h"
#include "TimeStamp.h"

#pragma warning( push )
#pragma warning( disable : 4251 )

namespace Log
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Contains all data related to a log entry in a format ready to be written to a sink.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class LOGGER_API LogEntry
	{
	public:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Constructs from a RawLogEntry produced by a Logger. 
		///		   Data is processed to fill all members and compiled log entry string is build.
		///
		/// \param rawLogEntry The RawLogEntry to take the data from.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		LogEntry(const RawLogEntry& rawLogEntry);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Constructs from a compiled log entry string. The string is processed to fill all members.
		///
		/// \param compiledLogEntry The compiled log entry string to process.
		///
		/// \exception std::invalid_argument Thrown if the string contains any invalid data that makes 
		///									 processing into valid parts impossible.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		LogEntry(const std::string& compiledLogEntry);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the timestamp this entry was logged with.
		///
		/// \returns The timestamp.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const TimeStamp& getTimeStamp() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the timestamp this entry was logged with as string.
		///
		/// \returns The timestamp string.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& getTimeStampString() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the log level this entry was logged with.
		///
		/// \returns The log level.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const LogLevel getLogLevel() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the log level this entry was logged with as string.
		///
		/// \returns The log level string.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& getLogLevelString() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the module name of the logger the message was logged with.
		///
		/// \returns The module name.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& getModuleName() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the thrad id of the thread this message was logged in as hexadecimal string.
		///
		/// \returns The thread id.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& getThreadIDString() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the message that was logged with this entry.
		///
		/// \returns The message.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& getMessage() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the compiled log entry. A string containing all data related to this entry ending with a '\n'.
		///
		/// \returns The compiled log entry.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::string& getCompiledLogEntry() const;

	private:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Compiles the compiled log entry from all other members.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void compileLogEntry();

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Decompiles the compiled log entry to generate all other member data.
		///
		/// \param compiledLogEntry The compiled log entry string to process.
		///
		/// \exception std::invalid_argument Thrown if the string contains any invalid data that makes 
		///									 processing into valid parts impossible.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void decompileLogEntry(const std::string& compiledLogEntry);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Creates a hexadecimal string out of a thread id.
		///
		/// \param threadID The therad id to process.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void createThreadIDString(const std::thread::id threadID);

		TimeStamp m_timeStamp; //!< The timestamp this entry was made with.
		std::string m_timeStampString; //!< The string version of the time stamp.
		LogLevel m_logLevel; //!< The log level this entry was logged with.
		std::string m_logLevelString; //!< The string version of the log level.
		std::string m_moduleName; //!< The module name of the logger that took the entry.
		std::string m_threadIDString; //!< The hexadecimal string version of the thread id of the thread this entry was logged in.
		std::string m_message; //!< The message logged with this entry.
		std::string m_compiledLogEntry; //!< The compiled message, containing all other members compiled into a single string ending with '\n'.
	};
}

#pragma warning( pop ) 