#pragma once

#include "LoggerAPI.h"

#include "FileSinkBase.h"

#pragma warning( push )
#pragma warning( disable : 4251 )

namespace Log
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Sink targeting a single log file. Must be initialized after construction in order to sink incomming 
	///		   messages. Can be initialized as a dummy in case errors prevent a normal initialization. 
	///        Initialization of any kind should only be delayed as much as possible to prevent high memory consumtion.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class LOGGER_API DelayedFileSink final : public FileSinkBase
	{
		friend class SinkFactory; //!< Friend to allow construction only from SinkFactory.
	public:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Destructor.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual ~DelayedFileSink();

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Initializes the sink and opens the file. Does not do any initialization if the class is already initialized.
		///
		/// \param fileName The file to be used as sink target.
		///
		/// \exception std::invalid_argument Thrown if the file cannot be opened for writing.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void initialize(const std::string& fileName);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Initializes the sink as dummy. Does not do any initialization if the class is already initialized.
		///		   Initializing as dummy discards all log entries.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void initializeAsDummy();

	private:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Constructor.
		///
		/// \param sinkName A name for the sink that can be used to identify it.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		DelayedFileSink(const std::string& sinkName);
	};
}

#pragma warning( pop ) 