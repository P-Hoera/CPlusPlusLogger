#pragma once

#include "LoggerAPI.h"

#include "SinkBase.h"

#pragma warning( push )
#pragma warning( disable : 4251 )

namespace Log
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Base class of all sinks targeting the default console. Must be initialized in order to sink incomming 
	///		   messages. Can be initialized as a dummy in case errors prevent a normal initialization. 
	///        Initialization of any kind should only be delayed as much as possible to prevent high memory consumtion.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class LOGGER_API ConsoleSinkBase : public SinkBase
	{
	public:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Destructor.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual ~ConsoleSinkBase();

	protected:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Constructor.
		///
		/// \param sinkName A name for the sink that can be used to identify it.
		/// \param sinkType The type of the sink.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ConsoleSinkBase(const std::string& sinkName, const SinkType sinkType);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Initializes the sink. Does not do any initialization if the class is already initialized.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void initialize();

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Initializes the sink as dummy. Does not do any initialization if the class is already initialized.
		///		   Initializing as dummy discards all log entries.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void initializeAsDummy();

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Writes a stored log entry to the console. It is only called after initialization or initialization 
		///		   as dummy was successful.
		///
		/// \param logEntry The log entry to be written.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void write(const std::shared_ptr<LogEntry> logEntry) final;
	};
}

#pragma warning( pop ) 