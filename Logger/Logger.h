#pragma once

#include "LoggerAPI.h"

#include "LogLevel.h"
#include "SinkSynchronizer.h"
#include "SinkBase.h"
#include "RawLogEntry.h"

#include <atomic>
#include <string>
#include <functional>
#include <vector>
#include <mutex>

#pragma warning( push )
#pragma warning( disable : 4251 )

namespace Log
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief A logger to log messages. Can be connected to various sinks to forward messages to logging targets. 
	///		   Has a configurable log level and allows message construction after log level check via fucntion pointer. 
	///		   Also allows logging messages regardless of the log level.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class LOGGER_API Logger
	{
		friend class LoggerFactory; //!< Friend to allow construction only from LoggerFactory.
		using SinkVector = std::vector<std::shared_ptr<SinkBase>>; //!< SinkVector for easier use of the sink vector list.
	public:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level trace if log level check is met.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logTrace(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level trace if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logTrace(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level trace. This message is always logged regardles of log level checks.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logTraceAlways(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level trace. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logTraceAlways(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level debug if log level check is met.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logDebug(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level debug if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logDebug(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level debug. This message is always logged regardles of log level checks.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logDebugAlways(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level debug. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logDebugAlways(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level info if log level check is met.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logInfo(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level info if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logInfo(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level info. This message is always logged regardles of log level checks.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logInfoAlways(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level info. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logInfoAlways(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level warning if log level check is met.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logWarning(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level warning if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logWarning(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level warning. This message is always logged regardles of log level checks.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logWarningAlways(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level warning. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logWarningAlways(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level error if log level check is met.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logError(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level error if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logError(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level error. This message is always logged regardles of log level checks.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logErrorAlways(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level error. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logErrorAlways(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level fatal if log level check is met.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logFatal(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level fatal if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logFatal(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with log level fatal. This message is always logged regardles of log level checks.
		///
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logFatalAlways(const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with log level fatal. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logFatalAlways(const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with with the given log level if log level check is met.
		///
		/// \param logLevel The log level of the message.
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void log(const LogLevel logLevel, const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with the given log level if log level check is met. 
		///		   The message function is only called if the log level check is successful.
		///
		/// \param logLevel The log level of the message.
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void log(const LogLevel logLevel, const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message with the given log level. This message is always logged regardles of log level checks.
		///
		/// \param logLevel The log level of the message.
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logAlways(const LogLevel logLevel, const std::string& message);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs a message generated by the message function with the given log level. This message is always logged 
		///		   regardles of log level checks.
		///
		/// \param logLevel The log level of the message.
		/// \param messageFunction The message function to call for message generation.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logAlways(const LogLevel logLevel, const std::function<std::string()>& messageFunction);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the current log level.
		///
		/// \returns The current log level.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		LogLevel getLogLevel() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Sets the log level to a new value.
		///
		/// \param newLogLevel The new log level.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void setLogLevel(const LogLevel newLogLevel);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Checks if the log level is high enought to be logged with current settings.
		///
		/// \param logLevel The log level to check.
		///
		/// \returns True if the requirements are met, otherwise false.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		bool shouldBeLogged(const LogLevel logLevel);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the logger name.
		///
		/// \returns The logger name.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string getLoggerName() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the module name.
		///
		/// \returns The module name.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::string getModuleName() const;

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Connects the sink. Does nothing if the sink is a nullptr or already connected.
		///
		/// \param sink The sink to connect.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void connectToSink(std::shared_ptr<SinkBase> sink);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Disconnects the sink. Does nothing if the sink is a nullptr or not connected.
		///
		/// \param sink The sink to disconnect.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void disconnectFromSink(const std::shared_ptr<SinkBase> sink);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Disconnects all connected sinks.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void disconnectAllSinks();

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Checks if the sink is connected to the logger.
		///
		/// \param sink The sink to check.
		///
		/// \returns True if it is connected, otehrwise false.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		bool isConnectedToSink(const std::shared_ptr<SinkBase> sink);

	private:
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Constructor.
		///
		/// \param loggerName A name for the logger that can be used to identify it.
		/// \param moduleName The module name used by log entries of this logger.
		/// \param logLevel The log level to use for initialization.
		/// \param sinkSynchronizer The sink synchronizer to use.
		///
		/// \exception std::invalid_argument Thrown if sink synchronizer is a nullptr.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Logger(const std::string& loggerName, const std::string& moduleName, const LogLevel logLevel, const std::shared_ptr<SinkSynchronizer> sinkSynchronizer);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Logs the message to all connected sinks.
		///
		/// \param logLevel The log level of the message.
		/// \param message The message to log.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void logToSinks(const LogLevel logLevel, const std::string& message);

		std::string m_loggerName; //!< The name of the logger.
		std::string m_moduleName; //!< The module name used in log entries.
		std::atomic<LogLevel> m_logLevel; //!< The current log level.
		std::mutex m_connectedSinksMutex; //!< The mutex protecting the connected sinks vector.
		std::shared_ptr<SinkVector> m_connectedSinks; //!< The connected sinks.
		std::shared_ptr<SinkSynchronizer> m_sinkSynchronizer; //!< The sink synchronizer used.
	};
}

#pragma warning( pop ) 